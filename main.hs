{- proph - A simple resolution-based theorem prover for propositional logic. -}

module Main where
import System.Environment
import Parser
import Resolve
import Proof
import Data.List

isQuery :: Term -> Bool
isQuery (Query _) = True
isQuery _ = False

{-|
    Okay, things look pretty good so far!

    Next up:

        2. Improve our resolution algorithm implementation. Right now we just
        try every possible combination, which is easy to write, but terribly
        inefficient. We should do a proper search algorithm.

        3. Store the steps taken to resolution, then be able to print it out.
        In other words, I want an autogenerated, Zeilberger-esque, "PROOF THAT
        CLAUSES ENTAIL QUERY" message to come out. Possibly find the *shortest*
        such proof, but that might be asking for too much of me right now.

        4. Implement a REPL.

    Done:

        1. Improved parser and error handling.
-}

handleStatements :: [Term] -> IO ()
handleStatements statements = do
    let (queries, clauses) = partition isQuery statements
        cnfClauses = clausesToCNF clauses
    mapM_ (clausesEntailProof clauses) queries

main = do
    (path:_) <- getArgs
    contents <- readFile path
    case parseInput contents of
      Left err -> print err
      Right statements -> handleStatements statements
